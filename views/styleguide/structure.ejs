<!DOCTYPE html>
<html class="js" lang="en">

<head>
  <title>Style Guide | Sass structure | MyService</title>
  <% include ../../partials/styleguide-styles-and-scripts.ejs %>
</head>

<body class="uikit-body uikit-grid uikit-refactor">

  <% include ../../partials/styleguide-header.ejs %>

  <main>
    <div class="container" id="main-content">

      <nav class="uikit-breadcrumbs" aria-label="breadcrumb">
        <ul class="uikit-link-list uikit-link-list--inline">
          <li>
            <a href="/styleguide">Home</a>
          </li>
          <li>SASS structure</li>
        </ul>
      </nav>

      <div class="row">
        <div class="col-sm-9">
          <h1>
            <abreviation title="Syntactically Awesome Style Sheets">SASS</abreviation> structure
          </h1>
          <div class="breakout">
            <p>
              <a href="http://sass-lang.com/">
                <abreviation title="Syntactically Awesome Style Sheets">SASS</abreviation>
              </a> is the CSS pre-processing syntax used for overriding UIKit2.0 styling within MyService. During each build, UIKit
              SASS files are referenced first, followed by customised MyService SASS. During compilation, a minified CSS file is
              generated into /docs/css.</p>
            <p>Raw CSS should never be edited manually. </p>
          </div>

          <h2>MyService SASS files</h2>
          <p>The files below are listed in the same order they are compiled when referencing
            <strong>main.scss</strong>.</p>
          <table>
            <thead>
              <tr>
                <th class="sass-name">Name</th>
                <th class="sass-description">Description</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <th class="subheading" colspan="2">1. Base (UI Kit 2.0)</th>
              </tr>
              <tr>
                <td>uikit</td>
                <td>This file includes all the components set for inclusion from UIKit2.0. While MyService is not using Pancake to manage
                  UIKit inclusions, uikit.scss should not be edited.</td>
              </tr>
              <tr>
                <th class="subheading" colspan="2">2. Utilities (variables and reusables)</th>
              </tr>
              <tr>
                <td>myservice-variables</td>
                <td>Variables are for defining specific colour values and responsive break points for MyService. Break points are based
                  on unique content requirements for MyService.</td>
              </tr>
              <tr>
                <th class="subheading" colspan="2">3. Components (micro layout files such as buttons and navigation)</th>
              </tr>
              <tr>
                <td>myservice-forms</td>
                <td>Primary for styling form elements (buttons, fields, legends, radio buttons and checkboxes). Also contains classes
                  for specific styling such as the width of DD MM YYYY input fields.</td>
              </tr>
              <tr>
                <td>myservice-user-feedback</td>
                <td>User feedback includes any messages that are presented to the user to provide contextual information. For example:
                  system outage messages, validation feedback or notifications that communicate a change in state.</td>
              </tr>
              <tr>
                <td>myservice-components</td>
                <td>Components are small re-usable utility classes that can be used to extend or override existing elements. For example:
                  floats, clearfix, claim flow help button and visually hidden classes for screen readers.</td>
              </tr>
              <tr>
                <td>myservice-navigation</td>
                <td>Navigation includes primary navigation (home, profile) and secondary navigation (navigating through various profile
                  pages). It also includes any anchor link navigation controls for navigating within a single screen (example: back
                  to top).</td>
              </tr>
              <tr>
                <td>myservice-typography</td>
                <td>Most typographic styling is inherited from UIKit. This SASS file is aimed more toward responsive font sizing and
                  table styling.</td>
              </tr>
              <tr>
                <td>myservice-sliding-panel-side</td>
                <td>The sliding panel side animates from the right side of the screen when triggered by a button. Examples: Log in panel
                  and feedback panel.</td>
              </tr>
              <tr>
                <td>myservice-sliding-panel-top</td>
                <td>The sliding panel top animates from the top of the screen when triggered by the 24hr support link located in the
                  header.</td>
              </tr>
              <tr>
                <td>myservice-autocomplete</td>
                <td>Controls typeahead styling. This is the list of suggestions that appear for selection when typing the first few
                  characters into a text field. Example: select diagnosis.</td>
              </tr>
              <tr>
                <td>myservice-star-rating</td>
                <td>The star rating component is presented to users on the final claim screen. It allows them to select a star. If they
                  select a star an optional text feedback field is rendered with a submit button.</td>
              </tr>
              <tr>
                <td>myservice-modal</td>
                <td>The
                  <a href="/styleguide/modals">modal</a> should only be used sparingly when the user is requested to confirm an action that will change or delete
                  data from their account. Example: Present a modal when confirming the deletion of an incomplete claim.</td>
              </tr>
              <tr>
                <td>myservice-waiting</td>
                <td>This controls layout of an animated icon to be displayed to indicate the change to a state of the page is still
                  being processed. Example: Displays immediately after a claim is submitted then disappears once the "claim submitted"
                  toast message displays.</td>
              </tr>
              <tr>
                <td>myservice-widgets</td>
                <td>Styling of feature boxes, mostly on authenticated home page. Each widget must contain a heading with identifying
                  icon.</td>
              </tr>
              <tr>
                <th class="subheading" colspan="2">4. Layout (macro layout files such as header and footer)</th>
              </tr>
              <tr>
                <td>myservice-header</td>
                <td>This SASS file controls the layout of all headers and responsive handling of primary navigation while it still exists
                  in the header. Examples: unathenticated header, authenticated dashboard header and reduced height headers for claim
                  and registration flows.</td>
              </tr>
              <tr>
                <td>myservice-footer</td>
                <td>Footer controls the gov crest logo and legal content links within the footer of most pages.</td>
              </tr>
              <tr>
                <th class="subheading" colspan="2">5. Pages (unique styling for specific pages)</th>
              </tr>
              <tr>
                <td>myservice-pages-home</td>
                <td>This SASS file is used to control layout that is unique to the unathenticated home page. Example: large feature
                  with background image, 1, 2, 3 steps and introductory content.</td>
              </tr>
              <tr>
                <td>myservice-pages-dashboard</td>
                <td>This SASS file controls any unique styling that apply to the authenticated dashboard. Most of the styling for this
                  page is controlled in myservice-widgets.</td>
              </tr>
              <tr>
                <td>myservice-pages-flows</td>
                <td>This is for stlying components within registration and claim flow that are only used once. If styling components
                  are re-used they should be moved to myservice-components.</td>
              </tr>
              <tr>
                <td>myservice-print</td>
                <td>Print styling is mostly for hiding elements that are not required in printed form.</td>
              </tr>
            </tbody>
          </table>

        </div>
        <% include ../../partials/styleguide-sidenav.ejs %>
      </div>
    </div>
  </main>
  <% include ../../partials/styleguide-footer.ejs %>
</body>

</html>